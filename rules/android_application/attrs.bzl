# Copyright 2021 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Attributes for android_application."""

<<<<<<< Updated upstream
load("//rules:android_split_transition.bzl", "android_split_transition")
=======
>>>>>>> Stashed changes
load(
    "//rules:attrs.bzl",
    _attrs = "attrs",
)
<<<<<<< Updated upstream
load("//rules:visibility.bzl", "PROJECT_VISIBILITY")
load(
    "//rules/android_sandboxed_sdk:providers.bzl",
    "AndroidArchivedSandboxedSdkInfo",
    "AndroidSandboxedSdkBundleInfo",
)

visibility(PROJECT_VISIBILITY)
=======
>>>>>>> Stashed changes

ANDROID_APPLICATION_ATTRS = _attrs.add(
    dict(
        manifest_values = attr.string_dict(),
        base_module = attr.label(allow_files = False),
        base_module_internal = attr.label(allow_files = False),
        bundle_config_file = attr.label(
            allow_single_file = [".pb.json"],
            doc = ("Path to config.pb.json file, see " +
                   "https://github.com/google/bundletool/blob/master/src/main/proto/config.proto " +
                   "for definition.\n\nNote: this attribute is subject to changes which may " +
                   "require teams to migrate their configurations to a build target."),
        ),
        app_integrity_config = attr.label(
            allow_single_file = [".binarypb"],
            doc = "Configuration of the integrity protection options. " +
                  "Provide a path to a binary .binarypb instance of " +
                  "https://github.com/google/bundletool/blob/master/src/main/proto/app_integrity_config.proto",
        ),
        rotation_config = attr.label(
            allow_single_file = [".textproto"],
            default = None,
        ),
        proguard_specs = attr.label_list(allow_empty = True, allow_files = True),
        proguard_generate_mapping = attr.bool(
            default = False,
            doc = "Whether to output the proguard mapping file.",
        ),
        startup_profile = attr.label(
            mandatory = False,
            allow_single_file = True,
            default = None,
            doc = "ART Startup profile to provide to R8 for PGO",
        ),
        baseline_profile = attr.label(
            mandatory = False,
            allow_single_file = True,
            default = None,
            doc = "ART Baseline profile to provide to R8 for PGO",
        ),
        compiler_dump = attr.string(
            default = "off",
            values = ["off", "on", "dump_only"],
            doc = """
            Whether to generate an R8 compiler dump or not.
            The file will be outputted as `target_dump.zip`.
            off: Don't generate compiler dump (default)
            on: Generate APK + Compiler Dump
            dump_only: Generate Compiler Dump Only (faster, but the build will eventually fail)
            """,
        ),
        shrink_resources = _attrs.tristate.create(
            default = _attrs.tristate.auto,
        ),
        feature_modules_title_files = attr.label_list(
            default = [],
            allow_files = True,
            doc = "Feature modules XML string resources files. " +
                  "Generated by the feature module macro and passed by the android application macro. " +
                  "Each file contains a single resource definition with the feature's title. " +
                  "These files are provided to the resource shrinker in order to keep them.",
        ),
        r8_jvm_args = attr.string_list(doc = "JVM Args to pass into R8."),
        custom_package = attr.string(),
        min_sdk_version = attr.int(),
        feature_modules = attr.label_list(allow_files = False),
        excludes = attr.string_list(
            doc = "List of regex file patterns to exclude from the final binary. If you use excludes, make sure that" +
                  " you do not utilise any code path requiring the excluded dependency by sufficient test coverage.",
        ),
        _bundle_deploy = attr.label(
            allow_single_file = True,
            default = ":bundle_deploy.sh_template",
        ),
        _bundle_keystore_properties = attr.label(
            allow_single_file = True,
            default = None,
        ),
        _feature_manifest_script = attr.label(
            allow_single_file = True,
            cfg = "exec",
            executable = True,
            default = ":gen_android_feature_manifest.sh",
        ),
        _java_toolchain = attr.label(
            default = Label("//tools/jdk:toolchain_android_only"),
        ),
        _merge_manifests = attr.label(
            default = ":merge_feature_manifests",
            cfg = "exec",
            executable = True,
        ),
        _priority_feature_manifest_script = attr.label(
            allow_single_file = True,
            cfg = "exec",
            executable = True,
            default = ":gen_priority_android_feature_manifest.sh",
        ),
        _host_javabase = attr.label(
            cfg = "exec",
            default = Label("//tools/jdk:current_java_runtime"),
        ),
        _lazy_bundles = attr.label(
            doc = """If true produce lazy bundles.""",
            default = "//rules/flags:lazy_bundles",
        ),
    ),
    _attrs.ANDROID_SDK,
)

ANDROID_FEATURE_MODULE_ATTRS = dict(
    binary = attr.label(),
    feature_name = attr.string(),
    library = attr.label(
        allow_rules = [
            "android_library",
            "kt_android_library",
        ],
        cfg = android_common.multi_cpu_configuration,
        doc = "android_library target to include as a feature split.",
    ),
    deps = attr.label_list(
        allow_rules = [
            "android_binary_internal",
            "android_library",
            "kt_android_library",
            "aar_import",
            "jvm_import",
            "java_import",
        ],
        cfg = android_common.multi_cpu_configuration,
        mandatory = True,
        doc = "Dependencies for the feauture module. Transitive deps are ignored.",
    ),
    excludes = attr.string_list(
        doc = "List of regex file patterns to exclude from the final binary. If you use excludes, make sure that" +
              " you do not utilise any code path requiring the excluded dependency by sufficient test coverage.",
    ),
    manifest = attr.label(allow_single_file = True),
    title_id = attr.string(),
    title_lib = attr.string(),
    proguard_specs = attr.label_list(allow_empty = True, allow_files = True),
    _feature_module_validation_script = attr.label(
        allow_single_file = True,
        cfg = "exec",
        executable = True,
        default = ":feature_module_validation.sh",
    ),
)
